name: Eval models
description: Evaluate different models on holdout dataset to see which model performs
  the best
inputs:
- {name: feature_data_path, type: String}
- {name: regression_weather_model_path}
- {name: rf_weather_model_path, type: String}
- {name: validation_days, type: Integer}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn' 'fastparquet' 'fsspec' 'gcsfs' 'google-cloud-storage' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'scikit-learn' 'fastparquet'
      'fsspec' 'gcsfs' 'google-cloud-storage' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "def eval_models(feature_data_path, regression_weather_model_path, rf_weather_model_path,\
      \ validation_days):\n    '''Evaluate different models on holdout dataset to\
      \ see which model performs the best'''\n    import json\n    import pandas as\
      \ pd\n    from io import BytesIO\n    import _pickle as cPickle # save ML model\n\
      \    from google.cloud import storage # save the model to GCS\n    from sklearn.ensemble\
      \ import RandomForestRegressor\n    from sklearn.linear_model import LinearRegression\n\
      \    from sklearn.metrics import mean_absolute_error, mean_squared_error\n \
      \   from sklearn.model_selection import train_test_split\n    from urllib.parse\
      \ import urlparse\n    from collections import namedtuple\n\n    # read dataframe\n\
      \    weather_df = pd.read_parquet(feature_data_path)\n    # holdout latest datelines\
      \ used for validation\n    weather_features_df = weather_df.drop(weather_df.tail(validation_days).index,\
      \ inplace=False, axis=0)#validation set\n\n    weather_validation_df = weather_df.tail(validation_days)\n\
      \n    x_val, y_val = weather_validation_df.drop('TG_future', axis=1), weather_validation_df['TG_future']\n\
      \n    def get_mae(model_path):\n        '''this function evaluates a model on\
      \ the validation dataset given just the model path'''\n        parse = urlparse(url=model_path,\
      \ allow_fragments=False)\n\n        if parse.path[0] =='/':\n            model_path\
      \ = parse.path[1:]\n\n        client = storage.Client()\n        bucket = client.get_bucket(parse.netloc)\n\
      \        blob = bucket.get_blob(model_path)\n        if blob is None:\n    \
      \        raise AttributeError('No files to download') \n        model_bytestream\
      \ = BytesIO(blob.download_as_string())\n        model = cPickle.load(model_bytestream)\n\
      \        predictions = model.predict(x_val)\n        return mean_absolute_error(y_val,\
      \ predictions)\n\n    Models = namedtuple('Model', 'type score path')\n    m_list\
      \ = list()\n\n    regression_mae = get_mae(regression_weather_model_path)\n\
      \    m_list.append(Models('regression', regression_mae, regression_weather_model_path))\n\
      \n    rf_mae = get_mae(rf_weather_model_path)\n    m_list.append(Models('rf',\
      \ rf_mae, rf_weather_model_path))\n\n    max_score = max([model.score for model\
      \ in m_list])\n    max_score_index = [model.score for model in m_list].index(max_score)\n\
      \    print('Best Model: ', m_list[max_score_index])\n    path = m_list[max_score_index].path\n\
      \    return path\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Eval\
      \ models', description='Evaluate different models on holdout dataset to see\
      \ which model performs the best')\n_parser.add_argument(\"--feature-data-path\"\
      , dest=\"feature_data_path\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--regression-weather-model-path\", dest=\"regression_weather_model_path\"\
      , type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --rf-weather-model-path\", dest=\"rf_weather_model_path\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--validation-days\", dest=\"\
      validation_days\", type=int, required=True, default=argparse.SUPPRESS)\n_parsed_args\
      \ = vars(_parser.parse_args())\n\n_outputs = eval_models(**_parsed_args)\n"
    args:
    - --feature-data-path
    - {inputValue: feature_data_path}
    - --regression-weather-model-path
    - {inputValue: regression_weather_model_path}
    - --rf-weather-model-path
    - {inputValue: rf_weather_model_path}
    - --validation-days
    - {inputValue: validation_days}
