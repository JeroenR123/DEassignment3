name: Train regression weather model
description: train a regression model with default parameters
inputs:
- {name: feature_data_path, type: String}
- {name: regression_weather_model_path, type: String}
- {name: validation_days, type: Integer}
outputs:
- {name: Output, type: String}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn' 'fastparquet' 'fsspec' 'gcsfs' 'google-cloud-storage' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'scikit-learn' 'fastparquet'
      'fsspec' 'gcsfs' 'google-cloud-storage' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "def train_regression_weather_model(feature_data_path, regression_weather_model_path,\
      \ validation_days):\n    '''train a regression model with default parameters'''\n\
      \    import pandas as pd\n    import _pickle as cPickle # save ML model\n  \
      \  from google.cloud import storage # save the model to GCS\n    from sklearn.metrics\
      \ import mean_absolute_error, mean_squared_error\n    from sklearn.linear_model\
      \ import LinearRegression\n    from sklearn.model_selection import train_test_split\n\
      \    from urllib.parse import urlparse\n\n    # read dataframe\n    weather_features_df\
      \ = pd.read_parquet(feature_data_path)\n    # holdout latest datelines used\
      \ for validation    \n    # get x and y\n    x_train, y_train = weather_features_df.drop('TG_future',\
      \ axis=1), weather_features_df['TG_future']\n    # split the data for initial\
      \ testing\n    X_train, X_test, Y_train, Y_test = train_test_split(x_train,\
      \ y_train, test_size=0.2,random_state=1)\n\n    # train the model\n    print('Training\
      \ regression model')\n    print('Shape of X: %s, %s' % (len(x_train), len(x_train.columns)))\n\
      \    regression_model = LinearRegression()\n    regression_model.fit(X_train,\
      \ Y_train)\n\n    # some initial testing\n    predictions = regression_model.predict(X_test)\n\
      \    print('mean absolute error without optimization: %s' % mean_absolute_error(Y_test,\
      \ predictions))\n    print('mean squared error without optimization is: %s'\
      \ % mean_squared_error(Y_test, predictions)) \n\n    # write out output\n  \
      \  # save the model into temp\n    with open('/tmp/model.pickle', 'wb') as f:\n\
      \        cPickle.dump(regression_model, f, -1)\n\n    # get client and write\
      \ to GCS\n    # parse model write path for GS\n    parse = urlparse(url=regression_weather_model_path,\
      \ allow_fragments=False)\n    if parse.path[0] =='/':\n        model_path =\
      \ parse.path[1:]\n\n    client = storage.Client()\n    bucket = client.get_bucket(parse.netloc)\n\
      \    blob = bucket.blob(model_path)\n    blob.upload_from_filename('/tmp/model.pickle')\n\
      \n    return regression_weather_model_path\n\ndef _serialize_str(str_value:\
      \ str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value\
      \ \"{}\" has type \"{}\" instead of str.'.format(str(str_value), str(type(str_value))))\n\
      \    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Train\
      \ regression weather model', description='train a regression model with default\
      \ parameters')\n_parser.add_argument(\"--feature-data-path\", dest=\"feature_data_path\"\
      , type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --regression-weather-model-path\", dest=\"regression_weather_model_path\", type=str,\
      \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--validation-days\"\
      , dest=\"validation_days\", type=int, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"----output-paths\", dest=\"_output_paths\", type=str,\
      \ nargs=1)\n_parsed_args = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"\
      _output_paths\", [])\n\n_outputs = train_regression_weather_model(**_parsed_args)\n\
      \n_outputs = [_outputs]\n\n_output_serializers = [\n    _serialize_str,\n\n\
      ]\n\nimport os\nfor idx, output_file in enumerate(_output_files):\n    try:\n\
      \        os.makedirs(os.path.dirname(output_file))\n    except OSError:\n  \
      \      pass\n    with open(output_file, 'w') as f:\n        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --feature-data-path
    - {inputValue: feature_data_path}
    - --regression-weather-model-path
    - {inputValue: regression_weather_model_path}
    - --validation-days
    - {inputValue: validation_days}
    - '----output-paths'
    - {outputPath: Output}
