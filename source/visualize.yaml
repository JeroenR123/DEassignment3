name: Visualize
inputs:
- {name: feature_data_path, type: String}
- {name: regression_weather_model_path}
- {name: rf_weather_model_path, type: String}
- {name: validation_days, type: Integer}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn' 'fastparquet' 'matplotlib' 'fsspec' 'gcsfs' 'google-cloud-storage'
      'dash' 'plotly' || PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet
      --no-warn-script-location 'scikit-learn' 'fastparquet' 'matplotlib' 'fsspec'
      'gcsfs' 'google-cloud-storage' 'dash' 'plotly' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "def visualize(feature_data_path, regression_weather_model_path, rf_weather_model_path,\
      \ validation_days):\n\n    weather_df = pd.read_parquet(feature_data_path)\n\
      \    # holdout latest datelines used for validation\n    weather_features_df\
      \ = weather_df.drop(weather_df.tail(validation_days).index, inplace=False, axis=0)#validation\
      \ set\n\n    weather_validation_df = weather_df.tail(validation_days)\n\n  \
      \  x_val, y_val = weather_validation_df.drop('TG_future', axis=1), weather_validation_df['TG_future']\n\
      \n    def get_prediction(model_path):\n        '''this function evaluates a\
      \ model on the validation dataset given just the model path'''\n        parse\
      \ = urlparse(url=model_path, allow_fragments=False)\n\n        if parse.path[0]\
      \ =='/':\n            model_path = parse.path[1:]\n\n        client = storage.Client()\n\
      \        bucket = client.get_bucket(parse.netloc)\n        blob = bucket.get_blob(model_path)\n\
      \        if blob is None:\n            raise AttributeError('No files to download')\
      \ \n        model_bytestream = BytesIO(blob.download_as_string())\n        model\
      \ = cPickle.load(model_bytestream)\n        predictions = model.predict(x_val)\n\
      \        print(y_val.values)\n        print(predictions)\n        prediction_df\
      \ =pd.DataFrame(data = {'prediction' : predictions, 'true value': y_val.values})\n\
      \n        return prediction_df\n\n    prediction_df_rf = get_prediction(rf_weather_model_path)\n\
      \    prediction_df_reg = get_prediction(regression_weather_model_path)\n\n \
      \   prediction_df_rf.to_parquet(feature_data_path, compression='GZIP')\n   \
      \ prediction_df_reg.to_parquet(feature_data_path, compression='GZIP')\n    weather_df.to_parquet(raw_data_path,\
      \ compression='GZIP')\n\n    import dash\n    import dash_html_components as\
      \ html\n    import dash_core_components as dcc\n    from dash.dependencies import\
      \ Input, Output\n    import plotly.express\n\n    from google.cloud import bigquery\n\
      \n    import plotly.graph_objects\n    import plotly.figure_factory\n    import\
      \ os\n\n    app = dash.Dash(__name__)\n\n    # The layout of the webapi\n  \
      \  app.layout = html.Div([dcc.Graph(id='graph_RUL')])\n\n    # Call back: to\
      \ make the plot real-time\n    def graph(n_inter):\n        # Read last 35 rows\
      \ of the table (i.e. the last 35 cycles)\n        df = read_data()\n\n     \
      \   # Plot the time vs the predicted RUL\n        fig1 = plotly.express.line(data_frame=prediction_df_rf,\n\
      \                                   x= 'prediction',\n                     \
      \              y='true value',\n                                   title = 'Predictions\
      \ vs true temp',\n                                   template = 'plotly_dark',\n\
      \                                   range_y = [0, 400])\n        return fig1\n\
      \n    if __name__ == '__main__':\n        app.run_server(debug=True)\n\nimport\
      \ argparse\n_parser = argparse.ArgumentParser(prog='Visualize', description='')\n\
      _parser.add_argument(\"--feature-data-path\", dest=\"feature_data_path\", type=str,\
      \ required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"--regression-weather-model-path\"\
      , dest=\"regression_weather_model_path\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--rf-weather-model-path\", dest=\"rf_weather_model_path\"\
      , type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      --validation-days\", dest=\"validation_days\", type=int, required=True, default=argparse.SUPPRESS)\n\
      _parsed_args = vars(_parser.parse_args())\n\n_outputs = visualize(**_parsed_args)\n"
    args:
    - --feature-data-path
    - {inputValue: feature_data_path}
    - --regression-weather-model-path
    - {inputValue: regression_weather_model_path}
    - --rf-weather-model-path
    - {inputValue: rf_weather_model_path}
    - --validation-days
    - {inputValue: validation_days}
