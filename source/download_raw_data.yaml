name: Download raw data
description: load data from local storage
inputs:
- {name: raw_data_path, type: String}
outputs:
- {name: Output, type: String}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'fastparquet' 'fsspec' 'gcsfs' 'google-cloud-storage' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'fastparquet' 'fsspec'
      'gcsfs' 'google-cloud-storage' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - |
      def download_raw_data(raw_data_path):
          '''load data from local storage'''
          import pandas as pd
          import numpy as np
          from google.cloud import storage
          import re

          API_URL = 'http://projects.knmi.nl/klimatologie/daggegevens/getdata_dag.cgi'
          API_KEY = "stns=370"
          # 370:         5.377       51.451      22.60  EINDHOVEN
          import urllib3
          import json

          with open("raw_data.txt", "w") as dt:
              import requests
              stations = [370]
              params = {
                  "stns": "370",
                  "start": "20150101",
              }
              print(params)

              url = 'http://projects.knmi.nl/klimatologie/daggegevens/getdata_dag.cgi'
              myobj = API_KEY

              r = requests.post(url, data = params)
              dt.write(r.text)

          with open('raw_data.txt', 'r') as fin:
              data = fin.read().splitlines(True)
          with open('edit.txt', 'w') as fout:
              fout.writelines(data[48:])
          with open('edit.txt', 'r') as fin:
              file = fin.readlines()

          import csv
          import re
          with open('raw_data.csv', 'w') as dt:
              csvv = csv.writer(dt)
              file[0] = file[0].replace('# ','')
              for row in file:
                  row = re.sub(r'(?<=[,])(?=[^\s])', r' ', row)
                  csvv.writerow(row.split())

          df =  pd.read_csv("raw_data.csv", error_bad_lines=False)

          def dfreplace(df, *args, **kwargs):
              s = pd.Series(df.values.flatten())
              s = s.str.replace(*args, **kwargs)
              return pd.DataFrame(s.values.reshape(df.shape), df.index, df.columns)

          df = df.drop([0], axis = 0)
          weather_df = dfreplace(df, ',', '')

          for i in weather_df.columns:
              weather_df[i] = weather_df[i].astype(str)
              weather_df[i][weather_df[i].apply(lambda i: True if re.search('^\s*$', str(i)) else False)]=np.NaN
          print(weather_df.columns)
          print(weather_df)
          print('trying to write to GS')
          weather_df.to_parquet(raw_data_path, compression='GZIP')
          print('Done!')
          return raw_data_path

      def _serialize_str(str_value: str) -> str:
          if not isinstance(str_value, str):
              raise TypeError('Value "{}" has type "{}" instead of str.'.format(str(str_value), str(type(str_value))))
          return str_value

      import argparse
      _parser = argparse.ArgumentParser(prog='Download raw data', description='load data from local storage')
      _parser.add_argument("--raw-data-path", dest="raw_data_path", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=1)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = download_raw_data(**_parsed_args)

      _outputs = [_outputs]

      _output_serializers = [
          _serialize_str,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --raw-data-path
    - {inputValue: raw_data_path}
    - '----output-paths'
    - {outputPath: Output}
