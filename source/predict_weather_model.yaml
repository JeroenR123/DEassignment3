name: Predict weather model
inputs:
- {name: new_feature_data_path, type: String}
- {name: mltype, type: String}
- {name: prediction_path, type: String}
outputs:
- {name: Output, type: String}
implementation:
  container:
    image: python:3.7
    command:
    - sh
    - -c
    - (PIP_DISABLE_PIP_VERSION_CHECK=1 python3 -m pip install --quiet --no-warn-script-location
      'scikit-learn' 'fastparquet' 'fsspec' 'gcsfs' 'google-cloud-storage' || PIP_DISABLE_PIP_VERSION_CHECK=1
      python3 -m pip install --quiet --no-warn-script-location 'scikit-learn' 'fastparquet'
      'fsspec' 'gcsfs' 'google-cloud-storage' --user) && "$0" "$@"
    - python3
    - -u
    - -c
    - "def predict_weather_model(new_feature_data_path, mltype, prediction_path):\n\
      \    import json\n    import pandas as pd\n    import _pickle as cPickle # save\
      \ ML model\n    from google.cloud import storage # save the model to GCS\n \
      \   from sklearn.ensemble import RandomForestClassifier\n    from sklearn.metrics\
      \ import mean_absolute_error, mean_squared_error\n    from sklearn.model_selection\
      \ import train_test_split\n    from urllib.parse import urlparse\n    from io\
      \ import BytesIO\n    import numpy as np\n    if mltype == 'rf':\n        model_path\
      \ = 'gs://bucket_de/model_store/rf/model.pkl'\n    elif mltype == 'reg':\n \
      \       model_path = 'gs://bucket_de/model_store/vanilla/model.pkl'\n\n    parse\
      \ = urlparse(url=model_path, allow_fragments=False)\n\n    if parse.path[0]\
      \ =='/':\n        model_path = parse.path[1:]\n\n    client = storage.Client()\n\
      \    bucket = client.get_bucket(parse.netloc)\n    blob = bucket.get_blob(model_path)\n\
      \    if blob is None:\n        raise AttributeError('No files to download')\
      \ \n    model_bytestream = BytesIO(blob.download_as_string())\n    model = cPickle.load(model_bytestream)\n\
      \    weather_features_df = pd.read_parquet(new_feature_data_path)\n    x = weather_features_df.drop('TG_future',\
      \ axis=1)\n    print(x)\n    predictions = model.predict(x)\n    predictions\
      \ = pd.DataFrame(data= {'prediction': predictions})\n    print('the weather\
      \ today will be %s' % (predictions))\n    predictions.to_parquet(prediction_path,\
      \ compression='GZIP')\n    return prediction_path\n\ndef _serialize_str(str_value:\
      \ str) -> str:\n    if not isinstance(str_value, str):\n        raise TypeError('Value\
      \ \"{}\" has type \"{}\" instead of str.'.format(str(str_value), str(type(str_value))))\n\
      \    return str_value\n\nimport argparse\n_parser = argparse.ArgumentParser(prog='Predict\
      \ weather model', description='')\n_parser.add_argument(\"--new-feature-data-path\"\
      , dest=\"new_feature_data_path\", type=str, required=True, default=argparse.SUPPRESS)\n\
      _parser.add_argument(\"--mltype\", dest=\"mltype\", type=str, required=True,\
      \ default=argparse.SUPPRESS)\n_parser.add_argument(\"--prediction-path\", dest=\"\
      prediction_path\", type=str, required=True, default=argparse.SUPPRESS)\n_parser.add_argument(\"\
      ----output-paths\", dest=\"_output_paths\", type=str, nargs=1)\n_parsed_args\
      \ = vars(_parser.parse_args())\n_output_files = _parsed_args.pop(\"_output_paths\"\
      , [])\n\n_outputs = predict_weather_model(**_parsed_args)\n\n_outputs = [_outputs]\n\
      \n_output_serializers = [\n    _serialize_str,\n\n]\n\nimport os\nfor idx, output_file\
      \ in enumerate(_output_files):\n    try:\n        os.makedirs(os.path.dirname(output_file))\n\
      \    except OSError:\n        pass\n    with open(output_file, 'w') as f:\n\
      \        f.write(_output_serializers[idx](_outputs[idx]))\n"
    args:
    - --new-feature-data-path
    - {inputValue: new_feature_data_path}
    - --mltype
    - {inputValue: mltype}
    - --prediction-path
    - {inputValue: prediction_path}
    - '----output-paths'
    - {outputPath: Output}
